public function getproductSellReport(Request $request)
{
    if (! auth()->user()->can('purchase_n_sell_report.view')) {
        abort(403, 'Unauthorized action.');
    }

    $business_id = $request->session()->get('user.business_id');
    $custom_labels = json_decode(session('business.custom_labels'), true);

    $product_custom_field1 = !empty($custom_labels['product']['custom_field_1']) ? $custom_labels['product']['custom_field_1'] : '';
    $product_custom_field2 = !empty($custom_labels['product']['custom_field_2']) ? $custom_labels['product']['custom_field_2'] : '';

    if ($request->ajax()) {
        $payment_types = $this->transactionUtil->payment_types(null, true, $business_id);

        $variation_id = $request->get('variation_id', null);
        $query = TransactionSellLine::join(
            'transactions as t',
            'transaction_sell_lines.transaction_id',
            '=',
            't.id'
        )
            ->join(
                'variations as v',
                'transaction_sell_lines.variation_id',
                '=',
                'v.id'
            )
            ->join('product_variations as pv', 'v.product_variation_id', '=', 'pv.id')
            ->join('contacts as c', 't.contact_id', '=', 'c.id')
            ->join('products as p', 'pv.product_id', '=', 'p.id')
            ->leftjoin('tax_rates', 'transaction_sell_lines.tax_id', '=', 'tax_rates.id')
            ->leftjoin('units as u', 'p.unit_id', '=', 'u.id')
            ->where('t.business_id', $business_id)
            ->where('t.type', 'sell')
            ->where('t.status', 'final')
            ->with('transaction.payment_lines')
            ->whereNull('parent_sell_line_id')
            ->select(
                'p.name as product_name',
                'p.type as product_type',
                'p.product_custom_field1 as product_custom_field1',
                'p.product_custom_field2 as product_custom_field2',
                'pv.name as product_variation',
                'v.name as variation_name',
                'v.sub_sku',
                'c.name as customer',
                'c.mobile as contact_no',
                'c.supplier_business_name',
                'c.contact_id',
                't.id as transaction_id',
                't.invoice_no',
                't.transaction_date as transaction_date',
                't.discount_amount as transaction_discount_amount',
                't.discount_type as transaction_discount_type',
                't.total_before_tax',
                'transaction_sell_lines.unit_price_before_discount as unit_price',
                'transaction_sell_lines.unit_price_inc_tax as unit_sale_price',
                DB::raw('(transaction_sell_lines.quantity - transaction_sell_lines.quantity_returned) as sell_qty'),
                'transaction_sell_lines.line_discount_type as discount_type',
                'transaction_sell_lines.line_discount_amount as discount_amount',
                'transaction_sell_lines.item_tax',
                'tax_rates.name as tax',
                'u.short_name as unit',
                'transaction_sell_lines.parent_sell_line_id',
                DB::raw('((transaction_sell_lines.quantity - transaction_sell_lines.quantity_returned) * transaction_sell_lines.unit_price_inc_tax) as subtotal')
            )
            ->groupBy('transaction_sell_lines.id');

        // Apply filters (existing code)
        if (! empty($variation_id)) {
            $query->where('transaction_sell_lines.variation_id', $variation_id);
        }

        $start_date = $request->get('start_date');
        $end_date = $request->get('end_date');
        if (! empty($start_date) && ! empty($end_date)) {
            $query->where('t.transaction_date', '>=', $start_date)
                ->where('t.transaction_date', '<=', $end_date);
        }

        $permitted_locations = auth()->user()->permitted_locations();
        if ($permitted_locations != 'all') {
            $query->whereIn('t.location_id', $permitted_locations);
        }

        $location_id = $request->get('location_id', null);
        if (! empty($location_id)) {
            $query->where('t.location_id', $location_id);
        }

        $customer_id = $request->get('customer_id', null);
        if (! empty($customer_id)) {
            $query->where('t.contact_id', $customer_id);
        }

        $customer_group_id = $request->get('customer_group_id', null);
        if (! empty($customer_group_id)) {
            $query->leftjoin('customer_groups AS CG', 'c.customer_group_id', '=', 'CG.id')
                ->where('CG.id', $customer_group_id);
        }

        $category_id = $request->get('category_id', null);
        if (! empty($category_id)) {
            $query->where('p.category_id', $category_id);
        }

        $brand_id = $request->get('brand_id', null);
        if (! empty($brand_id)) {
            $query->where('p.brand_id', $brand_id);
        }

        return Datatables::of($query)
            ->editColumn('product_name', function ($row) {
                $product_name = $row->product_name;
                if ($row->product_type == 'variable') {
                    $product_name .= ' - ' . $row->product_variation . ' - ' . $row->variation_name;
                }
                return $product_name;
            })
            ->editColumn('invoice_no', function ($row) {
                return '<a data-href="' . action([\App\Http\Controllers\SellController::class, 'show'], [$row->transaction_id])
                    . '" href="#" data-container=".view_modal" class="btn-modal">' . $row->invoice_no . '</a>';
            })
            ->editColumn('transaction_date', '{{@format_datetime($transaction_date)}}')
            ->editColumn('unit_sale_price', function ($row) {
                return '<span class="unit_sale_price" data-orig-value="' . $row->unit_sale_price . '">' .
                    $this->transactionUtil->num_f($row->unit_sale_price, true) . '</span>';
            })
            ->editColumn('sell_qty', function ($row) {
                $class = is_null($row->parent_sell_line_id) ? 'sell_qty' : '';
                return '<span class="' . $class . '"  data-orig-value="' . $row->sell_qty . '"
                data-unit="' . $row->unit . '" >' .
                    $this->transactionUtil->num_f($row->sell_qty, false, null, true) . '</span> ' . $row->unit;
            })
            ->editColumn('subtotal', function ($row) {
                $class = is_null($row->parent_sell_line_id) ? 'row_subtotal' : '';
                return '<span class="' . $class . '"  data-orig-value="' . $row->subtotal . '">' .
                    $this->transactionUtil->num_f($row->subtotal, true) . '</span>';
            })
            ->editColumn('unit_price', function ($row) {
                return '<span class="unit_price" data-orig-value="' . $row->unit_price . '">' .
                    $this->transactionUtil->num_f($row->unit_price, true) . '</span>';
            })
            ->editColumn('discount_amount', '
                @if($discount_type == "percentage")
                    {{@num_format($discount_amount)}} %
                @elseif($discount_type == "fixed")
                    {{@num_format($discount_amount)}}
                @endif
                ')
            // NEW: Line Discount Column (total line discounts for this transaction)
            ->addColumn('line_discount', function ($row) {
                $line_discount_result = DB::table('transaction_sell_lines')
                    ->where('transaction_id', $row->transaction_id)
                    ->select([
                        DB::raw('SUM(CASE
                WHEN line_discount_type = "percentage" THEN
                    (unit_price_before_discount * quantity * line_discount_amount / 100)
                ELSE (line_discount_amount * quantity)
            END) as total_line_discount')
                    ])
                    ->first();

                $line_discount = $line_discount_result->total_line_discount ?? 0;

                return '<span class="display_currency line_discount" data-orig-value="' . $line_discount . '" data-currency_symbol="true">' .
                    number_format($line_discount, 2) . '</span>';
            })
            // NEW: Invoice Discount Column
            ->addColumn('invoice_discount', function ($row) {
                $invoice_discount = 0;
                if ($row->transaction_discount_amount > 0) {
                    if ($row->transaction_discount_type == 'percentage') {
                        $invoice_discount = ($row->total_before_tax * $row->transaction_discount_amount) / 100;
                    } else {
                        $invoice_discount = $row->transaction_discount_amount;
                    }
                }

                return '<span class="display_currency invoice_discount" data-orig-value="' . $invoice_discount . '" data-currency_symbol="true">' .
                    number_format($invoice_discount, 2) . '</span>';
            })
            // NEW: Total Discount Column (line + invoice)
            ->addColumn('total_discount', function ($row) {
                // Calculate line discount
                $line_discount_result = DB::table('transaction_sell_lines')
                    ->where('transaction_id', $row->transaction_id)
                    ->select([
                        DB::raw('SUM(CASE
                WHEN line_discount_type = "percentage" THEN
                    (unit_price_before_discount * quantity * line_discount_amount / 100)
                ELSE (line_discount_amount * quantity)
            END) as total_line_discount')
                    ])
                    ->first();

                $line_discount = $line_discount_result->total_line_discount ?? 0;

                // Calculate invoice discount
                $invoice_discount = 0;
                if ($row->transaction_discount_amount > 0) {
                    if ($row->transaction_discount_type == 'percentage') {
                        $invoice_discount = ($row->total_before_tax * $row->transaction_discount_amount) / 100;
                    } else {
                        $invoice_discount = $row->transaction_discount_amount;
                    }
                }

                $total_discount = $line_discount + $invoice_discount;

                return '<span class="display_currency total_discount" data-orig-value="' . $total_discount . '" data-currency_symbol="true">' .
                    number_format($total_discount, 2) . '</span>';
            })
            ->editColumn('tax', function ($row) {
                return $this->transactionUtil->num_f($row->item_tax, true)
                    . '<br>' . '<span data-orig-value="' . $row->item_tax . '"
                 class="tax" data-unit="' . $row->tax . '"><small>(' . $row->tax . ')</small></span>';
            })
            ->addColumn('payment_methods', function ($row) use ($payment_types) {
                $methods = array_unique($row->transaction->payment_lines->pluck('method')->toArray());
                $count = count($methods);
                $payment_method = '';
                if ($count == 1) {
                    $payment_method = $payment_types[$methods[0]] ?? '';
                } elseif ($count > 1) {
                    $payment_method = __('lang_v1.checkout_multi_pay');
                }

                $html = ! empty($payment_method) ? '<span class="payment-method" data-orig-value="' . $payment_method . '" data-status-name="' . $payment_method . '">' . $payment_method . '</span>' : '';
                return $html;
            })
            ->editColumn('customer', '@if(!empty($supplier_business_name)) {{$supplier_business_name}},<br>@endif {{$customer}}')
            ->rawColumns(['invoice_no', 'unit_sale_price', 'subtotal', 'sell_qty', 'discount_amount', 'unit_price', 'line_discount', 'invoice_discount', 'total_discount', 'tax', 'customer', 'payment_methods'])
            ->make(true);
    }

    $business_locations = BusinessLocation::forDropdown($business_id);
    $customers = Contact::customersDropdown($business_id);
    $categories = Category::forDropdown($business_id, 'product');
    $brands = Brands::forDropdown($business_id);
    $customer_group = CustomerGroup::forDropdown($business_id, false, true);

    return view('report.product_sell_report')
        ->with(compact(
            'business_locations',
            'customers',
            'categories',
            'brands',
            'customer_group',
            'product_custom_field1',
            'product_custom_field2'
        ));
}