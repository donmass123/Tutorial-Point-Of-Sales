   /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\InvoiceLayout  $invoiceLayout
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        if (! auth()->user()->can('invoice_settings.access')) {
            abort(403, 'Unauthorized action.');
        }

        try {
            $validator = Validator::make($request->all(), [
                'logo' => 'mimes:jpeg,gif,png|1000',
                'watermark_logo' => 'mimes:jpeg,gif,png|1000', // Add watermark validation
            ]);

            $input = $request->only([
                'name',
                'header_text',
                'invoice_no_prefix',
                'invoice_heading',
                'sub_total_label',
                'discount_label',
                'tax_label',
                'total_label',
                'highlight_color',
                'footer_text',
                'invoice_heading_not_paid',
                'invoice_heading_paid',
                'total_due_label',
                'customer_label',
                'paid_label',
                'sub_heading_line1',
                'sub_heading_line2',
                'sub_heading_line3',
                'sub_heading_line4',
                'sub_heading_line5',
                'table_product_label',
                'table_qty_label',
                'table_unit_price_label',
                'table_subtotal_label',
                'client_id_label',
                'date_label',
                'quotation_heading',
                'quotation_no_prefix',
                'design',
                'client_tax_label',
                'cat_code_label',
                'cn_heading',
                'cn_no_label',
                'cn_amount_label',
                'sales_person_label',
                'prev_bal_label',
                'date_time_format',
                'change_return_label',
                'round_off_label',
                'commission_agent_label',
                // Add watermark fields
                'watermark_width',
                'watermark_height',
                'watermark_opacity',
                'watermark_position'
            ]);
            $business_id = $request->session()->get('user.business_id');

            $checkboxes = [
                'show_business_name',
                'show_location_name',
                'show_landmark',
                'show_city',
                'show_state',
                'show_country',
                'show_zip_code',
                'show_mobile_number',
                'show_alternate_number',
                'show_email',
                'show_tax_1',
                'show_tax_2',
                'show_logo',
                'show_barcode',
                'show_payments',
                'show_customer',
                'show_client_id',
                'show_brand',
                'show_sku',
                'show_cat_code',
                'show_sale_description',
                'show_sales_person',
                'show_expiry',
                'show_lot',
                'show_previous_bal',
                'show_image',
                'show_reward_point',
                'show_qr_code',
                'show_commission_agent',
                'show_letter_head',
                'show_watermark', // Add watermark checkbox
            ];
            foreach ($checkboxes as $name) {
                $input[$name] = ! empty($request->input($name)) ? 1 : 0;
            }

            //Upload Logo
            $logo_name = $this->commonUtil->uploadFile($request, 'logo', 'invoice_logos', 'image');
            if (! empty($logo_name)) {
                $input['logo'] = $logo_name;
            }

            //Upload letter head
            $letter_head = $this->commonUtil->uploadFile($request, 'letter_head', 'invoice_logos', 'image');
            if (! empty($letter_head)) {
                $input['letter_head'] = $letter_head;
            }

            //Upload Watermark Logo
            $watermark_logo_name = $this->commonUtil->uploadFile($request, 'watermark_logo', 'invoice_logos', 'image');
            if (! empty($watermark_logo_name)) {
                $input['watermark_logo'] = $watermark_logo_name;
            }

            // Set default values for watermark settings
            $input['watermark_width'] = $request->input('watermark_width', 300);
            $input['watermark_height'] = $request->input('watermark_height', 300);
            $input['watermark_opacity'] = $request->input('watermark_opacity', '0.1');
            $input['watermark_position'] = $request->input('watermark_position', 'center');

            if (! empty($request->input('is_default'))) {
                //get_default
                $default = InvoiceLayout::where('business_id', $business_id)
                    ->where('is_default', 1)
                    ->update(['is_default' => 0]);
                $input['is_default'] = 1;
            }

            //Module info
            if ($request->has('module_info')) {
                $input['module_info'] = json_encode($request->input('module_info'));
            }

            if (! empty($request->input('table_tax_headings'))) {
                $input['table_tax_headings'] = json_encode($request->input('table_tax_headings'));
            }

            $input['product_custom_fields'] = ! empty($request->input('product_custom_fields')) ? json_encode($request->input('product_custom_fields')) : null;
            $input['contact_custom_fields'] = ! empty($request->input('contact_custom_fields')) ? json_encode($request->input('contact_custom_fields')) : null;
            $input['location_custom_fields'] = ! empty($request->input('location_custom_fields')) ? json_encode($request->input('location_custom_fields')) : null;
            $input['common_settings'] = ! empty($request->input('common_settings')) ? json_encode($request->input('common_settings')) : null;
            $input['qr_code_fields'] = ! empty($request->input('qr_code_fields')) ? json_encode($request->input('qr_code_fields')) : null;

            InvoiceLayout::where('id', $id)
                ->where('business_id', $business_id)
                ->update($input);
            $output = [
                'success' => 1,
                'msg' => __('invoice.layout_updated_success'),
            ];
        } catch (\Exception $e) {
            \Log::emergency('File:' . $e->getFile() . 'Line:' . $e->getLine() . 'Message:' . $e->getMessage());

            $output = [
                'success' => 0,
                'msg' => __('messages.something_went_wrong'),
            ];
        }

        return redirect('invoice-schemes')->with('status', $output);
    }