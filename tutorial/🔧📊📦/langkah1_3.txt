 /**
 * Shows product stock report with enhanced multi-select filtering
 *
 * @return \Illuminate\Http\Response
 */
public function getStockReport(Request $request)
{
    if (!auth()->user()->can('stock_report.view')) {
        abort(403, 'Unauthorized action.');
    }

    $business_id = $request->session()->get('user.business_id');

    // Check if manufacturing module is enabled
    $show_manufacturing_data = 0;
    if (
        $this->moduleUtil->isModuleInstalled('Manufacturing') &&
        (auth()->user()->can('superadmin') ||
            $this->moduleUtil->hasThePermissionInSubscription($business_id, 'manufacturing_module'))
    ) {
        $show_manufacturing_data = 1;
    }

    // Check selling price group permissions
    $selling_price_groups = SellingPriceGroup::where('business_id', $business_id)->get();
    $allowed_selling_price_group = false;
    foreach ($selling_price_groups as $selling_price_group) {
        if (auth()->user()->can('selling_price_group.' . $selling_price_group->id)) {
            $allowed_selling_price_group = true;
            break;
        }
    }

    if ($request->ajax()) {
        // Process enhanced multi-select filters
        $filters = $this->processEnhancedStockReportFilters($request);

        // Add manufacturing data flag
        $filters['show_manufacturing_data'] = $show_manufacturing_data;

        // Return the details in ajax call
        $for = $request->input('for') == 'view_product' ? 'view_product' : 'datatables';

        $products = $this->productUtil->getProductStockDetails($business_id, $filters, $for);

        // To show stock details on view product modal
        if ($for == 'view_product' && !empty($request->input('product_id'))) {
            $product_stock_details = $products;
            return view('product.partials.product_stock_details')->with(compact('product_stock_details'));
        }

        // Build DataTable with enhanced columns
        $datatable = Datatables::of($products)
            ->editColumn('stock', function ($row) {
                if ($row->enable_stock) {
                    $stock = $row->stock ? $row->stock : 0;
                    return '<span class="current_stock" data-orig-value="' . (float) $stock . '" data-unit="' . $row->unit . '"> ' .
                        $this->transactionUtil->num_f($stock, false, null, true) . '</span> ' . $row->unit;
                } else {
                    return '--';
                }
            })
            ->editColumn('product', function ($row) {
                $name = $row->product;
                return $name;
            })
            ->addColumn('action', function ($row) {
                return '<a class="tw-dw-btn tw-dw-btn-xs tw-dw-btn-outline tw-dw-btn-info tw-w-max" href="' .
                    action([\App\Http\Controllers\ProductController::class, 'productStockHistory'], [$row->product_id]) .
                    '?location_id=' . $row->location_id . '&variation_id=' . $row->variation_id .
                    '"><i class="fas fa-history"></i> ' . __('lang_v1.product_stock_history') . '</a>';
            })
            ->addColumn('variation', function ($row) {
                $variation = '';
                if ($row->type == 'variable') {
                    $variation .= $row->product_variation . '-' . $row->variation_name;
                }
                return $variation;
            })
            ->editColumn('total_sold', function ($row) {
                $total_sold = 0;
                if ($row->total_sold) {
                    $total_sold = (float) $row->total_sold;
                }
                return '<span data-is_quantity="true" class="total_sold" data-orig-value="' . $total_sold . '" data-unit="' . $row->unit . '" >' .
                    $this->transactionUtil->num_f($total_sold, false, null, true) . '</span> ' . $row->unit;
            })
            ->editColumn('total_transfered', function ($row) {
                $total_transfered = 0;
                if ($row->total_transfered) {
                    $total_transfered = (float) $row->total_transfered;
                }
                return '<span class="total_transfered" data-orig-value="' . $total_transfered . '" data-unit="' . $row->unit . '" >' .
                    $this->transactionUtil->num_f($total_transfered, false, null, true) . '</span> ' . $row->unit;
            })
            ->editColumn('total_adjusted', function ($row) {
                $total_adjusted = 0;
                if ($row->total_adjusted) {
                    $total_adjusted = (float) $row->total_adjusted;
                }
                return '<span class="total_adjusted" data-orig-value="' . $total_adjusted . '" data-unit="' . $row->unit . '" >' .
                    $this->transactionUtil->num_f($total_adjusted, false, null, true) . '</span> ' . $row->unit;
            })
            ->editColumn('unit_price', function ($row) use ($allowed_selling_price_group) {
                $html = '';
                if (auth()->user()->can('access_default_selling_price')) {
                    $html .= $this->transactionUtil->num_f($row->unit_price, true);
                }

                if ($allowed_selling_price_group) {
                    $html .= ' <button type="button" class="tw-dw-btn tw-dw-btn-xs tw-dw-btn-outline tw-dw-btn-primary tw-w-max btn-modal no-print" data-container=".view_modal" data-href="' .
                        action([\App\Http\Controllers\ProductController::class, 'viewGroupPrice'], [$row->product_id]) . '">' .
                        __('lang_v1.view_group_prices') . '</button>';
                }

                return $html;
            })
            ->editColumn('stock_price', function ($row) {
                $html = '<span class="total_stock_price" data-orig-value="' . $row->stock_price . '">' .
                    $this->transactionUtil->num_f($row->stock_price, true) . '</span>';
                return $html;
            })
            ->editColumn('stock_value_by_sale_price', function ($row) {
                $stock = $row->stock ? $row->stock : 0;
                $unit_selling_price = (float) $row->group_price > 0 ? $row->group_price : $row->unit_price;
                $stock_price = $stock * $unit_selling_price;

                return '<span class="stock_value_by_sale_price" data-orig-value="' . (float) $stock_price . '" > ' .
                    $this->transactionUtil->num_f($stock_price, true) . '</span>';
            })
            ->addColumn('potential_profit', function ($row) {
                $stock = $row->stock ? $row->stock : 0;
                $unit_selling_price = (float) $row->group_price > 0 ? $row->group_price : $row->unit_price;
                $stock_price_by_sp = $stock * $unit_selling_price;
                $potential_profit = (float) $stock_price_by_sp - (float) $row->stock_price;

                return '<span class="potential_profit" data-orig-value="' . (float) $potential_profit . '" > ' .
                    $this->transactionUtil->num_f($potential_profit, true) . '</span>';
            })
            ->setRowClass(function ($row) {
                return $row->enable_stock && $row->stock <= $row->alert_quantity ? 'bg-danger' : '';
            })
            ->filterColumn('variation', function ($query, $keyword) {
                $query->whereRaw("CONCAT(COALESCE(pv.name, ''), '-', COALESCE(variations.name, '')) like ?", ["%{$keyword}%"]);
            })
            ->filterColumn('stock', function ($query, $keyword) {
                if (request('stock_level') == 'gt_zero') {
                    $query->having('stock', '>', 0);
                } elseif (request('stock_level') == 'lt_one') {
                    $query->having('stock', '<=', 0);
                }
            })
            ->removeColumn('enable_stock')
            ->removeColumn('unit')
            ->removeColumn('id');

        $raw_columns = [
            'unit_price',
            'total_transfered',
            'total_sold',
            'total_adjusted',
            'stock',
            'stock_price',
            'stock_value_by_sale_price',
            'potential_profit',
            'action',
        ];

        // Add manufacturing columns if enabled
        if ($show_manufacturing_data) {
            $datatable->editColumn('total_mfg_stock', function ($row) {
                $total_mfg_stock = 0;
                if ($row->total_mfg_stock) {
                    $total_mfg_stock = (float) $row->total_mfg_stock;
                }

                return '<span data-is_quantity="true" class="total_mfg_stock" data-orig-value="' . $total_mfg_stock . '" data-unit="' . $row->unit . '" >' .
                    $this->transactionUtil->num_f($total_mfg_stock, false, null, true) . '</span> ' . $row->unit;
            });
            $raw_columns[] = 'total_mfg_stock';
        }

        return $datatable->rawColumns($raw_columns)->make(true);
    }

    // Prepare data for the view
    $categories = Category::forDropdown($business_id, 'product');
    $brands = Brands::forDropdown($business_id);
    $units = Unit::where('business_id', $business_id)->pluck('short_name', 'id');
    $business_locations = BusinessLocation::forDropdown($business_id, true);

    return view('report.stock_report')->with(compact(
        'categories',
        'brands',
        'units',
        'business_locations',
        'show_manufacturing_data'
    ));
}