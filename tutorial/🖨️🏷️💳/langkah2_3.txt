 /**
 * Enhanced show_label_preview method with optimizations
 */
public function show_label_preview(Request $request)
{
    try {
        $products = $request->get('products');
        $print = $request->get('print');
        $barcode_setting = $request->get('barcode_setting');
        $business_id = $request->session()->get('user.business_id');

        $barcode_details = Barcode::find($barcode_setting);
        $barcode_details->stickers_in_one_sheet = $barcode_details->is_continuous ? $barcode_details->stickers_in_one_row : $barcode_details->stickers_in_one_sheet;
        $barcode_details->paper_height = $barcode_details->is_continuous ? $barcode_details->height : $barcode_details->paper_height;

        if ($barcode_details->stickers_in_one_row == 1) {
            $barcode_details->col_distance = 0;
            $barcode_details->row_distance = 0;
        }

        $business_name = $request->session()->get('business.name');

        // Handle image source selection
        $image_url = null;
        if (!empty($print['image'])) {
            if ($print['image_source'] === 'select_image' && !empty($print['select_image_url'])) {
                $image_url = $print['select_image_url'];
            } elseif ($print['image_source'] === 'label_image') {
                $image_url = $this->getLabelImageUrlFromSettings($business_id);
            }
        }

        $product_details_page_wise = [];
        $total_qty = 0;

        foreach ($products as $value) {
            $details = $this->productUtil->getDetailsFromVariation($value['variation_id'], $business_id, null, false);

            // Format prices properly
            $details->sell_price_inc_tax = $this->productUtil->num_f($details->sell_price_inc_tax) ?: $details->sell_price_inc_tax;
            $details->default_sell_price = $this->productUtil->num_f($details->default_sell_price) ?: $details->default_sell_price;

            if (!empty($value['exp_date'])) {
                $details->exp_date = $value['exp_date'];
            }
            if (!empty($value['packing_date'])) {
                $details->packing_date = $value['packing_date'];
            }
            if (!empty($value['lot_number'])) {
                $details->lot_number = $value['lot_number'];
            }

            if (!empty($value['price_group_id'])) {
                $tax_id = $print['price_type'] == 'inclusive' ?: $details->tax_id;
                $group_prices = $this->productUtil->getVariationGroupPrice($value['variation_id'], $value['price_group_id'], $tax_id);
                $details->sell_price_inc_tax = $group_prices['price_inc_tax'];
                $details->default_sell_price = $group_prices['price_exc_tax'];
            }

            for ($i = 0; $i < $value['quantity']; $i++) {
                $page = intdiv($total_qty, $barcode_details->stickers_in_one_sheet);

                if ($total_qty % $barcode_details->stickers_in_one_sheet == 0) {
                    $product_details_page_wise[$page] = [];
                }

                // OPTIMIZATION: Pre-generate optimized barcodes and QR codes
                if (!empty($print['barcode'])) {
                    $details->optimized_barcode = $this->generateOptimizedBarcode(
                        $details->sub_sku,
                        $barcode_details->width,
                        $print['barcode_size'] ?? 0.8
                    );
                }

                if (!empty($print['qrcode'])) {
                    $details->optimized_qrcode = $this->generateOptimizedQRCode(
                        $details->sub_sku,
                        $print['qrcode_size'] ?? 1.4
                    );
                }

                $product_details_page_wise[$page][] = $details;
                $total_qty++;
            }
        }

        $margin_top = $barcode_details->is_continuous ? 0 : $barcode_details->top_margin * 1;
        $margin_left = $barcode_details->is_continuous ? 0 : $barcode_details->left_margin * 1;
        $paper_width = $barcode_details->paper_width * 1;
        $paper_height = $barcode_details->paper_height * 1;

        $i = 0;
        $len = count($product_details_page_wise);
        $is_first = false;
        $is_last = false;

        $factor = (($barcode_details->width / $barcode_details->height)) / ($barcode_details->is_continuous ? 2 : 4);
        $html = '';

        foreach ($product_details_page_wise as $page => $page_products) {
            $output = view('labels.partials.enhanced_preview')  // Use enhanced template
                ->with(compact('print', 'page_products', 'business_name', 'barcode_details', 'margin_top', 'margin_left', 'paper_width', 'paper_height', 'is_first', 'is_last', 'factor', 'image_url'))
                ->render();

            $html .= $output;
        }

        return response()->json(['success' => true, 'html' => $html]);
    } catch (\Exception $e) {
        \Log::emergency('File:' . $e->getFile() . 'Line:' . $e->getLine() . 'Message:' . $e->getMessage());

        return response()->json([
            'success' => false,
            'msg' => __('lang_v1.barcode_label_error')
        ]);
    }
}